//Enter code here
//Enter code here//Enter code here

function runProgram(input){
input=input.trim().split("\n")



    let [row,col]=input[0].trim().split(" ").map(Number)
    let arr=[]
   
    for(let j=1;j<=row;j++){
        arr.push(input[j].trim().split(" ").map(Number))
    }
    

 
    console.log(fa(arr,row,col))



    
}



function dfs(M,i,j,visited,ROW,COL)
    {
       
   if(i<0||j<0||i>=ROW||j>=COL||M[i][j]==0||visited[i][j]==1) return;
    
 
       visited[i][j]=1
       dfs(M,i+1,j,visited,ROW,COL);
       dfs(M,i-1,j,visited,ROW,COL);
       dfs(M,i,j+1,visited,ROW,COL);
       dfs(M,i,j-1,visited,ROW,COL);
    //   dfs(M,i-1,j-1,visited,ROW,COL);
    //   dfs(M,i+1,j-1,visited,ROW,COL);
    //   dfs(M,i-1,j+1,visited,ROW,COL)
   
         
    
    }
function fa(M,ROW,COL){
     
        let visited = new Array(ROW);
        for(let i = 0; i < ROW; i++)
        {
            visited[i] = new Array(COL);
        }
        for(let i = 0; i < ROW; i++)
        {
            for(let j = 0; j < COL; j++)
            {
                visited[i][j] = 0;
            }
        }
        
        let count = 0;
        for (let i = 0; i < ROW; i++)
        {
            for (let j = 0; j < COL; j++)
            {
                if (!visited[i][j]&&M[i][j]==1)
                {
                    
                    dfs(M,i,j,visited,ROW,COL);
                    count++;
                }
            }
        }
       return count
    
}


 

if (process.env.USER === "") {
  runProgram(``);
} else {
  process.stdin.resume();
  process.stdin.setEncoding("ascii");
  let read = "";
  process.stdin.on("data", function (input) {
    read += input;
  });
  process.stdin.on("end", function () {
    read = read.replace(/\n$/, "");
    read = read.replace(/\n$/, "");
    runProgram(read);
  });
  process.on("SIGINT", function () {
    read = read.replace(/\n$/, "");
    runProgram(read);
    process.exit(0);
  });
}
